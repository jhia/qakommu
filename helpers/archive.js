const fs = require('fs');
const { makeid } = require('./utilities');

/**
 * Type for archives and images
 */
class Archive {
  /**
   * @param {string} name - image base name, before _ 
   * @param {req.file} file - image file, form-data image
   * @param {string} id - unique id, after _, is generated by default
   */
  constructor(name, file, id = makeid(6)) {
    this.suffix = file.name.split('.').slice(-1);
    this.base = name;
    this.id = id;
    this.file = file;
  }

  /**
   * Create new archive from Image file
   * @param {req.file} image image file, form-data image 
   * @return {Archive}
   */
  static from(image) {
    return new Archive(image.base, image.file, image.id);
  }

  /**
   * Create new archive from image name
   * @param {string} name image name
   */
  static fromString(name) {
    let [base, rest] = name.split('_');
    let [id, _] = rest.split('.');

    return new Archive(base, { name: rest }, id);
  }

  get name() {
    return `${this.base}_${this.id}.${this.suffix}`;
  }

  get route() {
    return '/upload/' + this.name;
  }

  /**
   * save into server
   */
  upload() {
    if(this.file.mv) {
      this.file.mv(`.${this.route}`);
    }
  }

  /**
   * delete from server
   */
  remove() {
    fs.unlinkSync(`.${this.route}`);
  }
}

module.exports = Archive;